name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check changed files
        id: changes
        run: |
          # Get list of changed files
          git fetch origin ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Categorize changes
          HAS_SOURCE_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(src/|adblock-filters-list/)" || echo "")
          HAS_CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(package\.json|tsconfig\.json|eslint\.config\.js)" || echo "")
          HAS_WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep -E "\.github/workflows/" || echo "")
          HAS_GENERATED_CHANGES=$(echo "$CHANGED_FILES" | grep -E "subscription/" || echo "")
          
          echo "has_source_changes=$([[ -n "$HAS_SOURCE_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_config_changes=$([[ -n "$HAS_CONFIG_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_workflow_changes=$([[ -n "$HAS_WORKFLOW_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_generated_changes=$([[ -n "$HAS_GENERATED_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          
      - name: Run type checking
        run: npm run type-check
        
      - name: Run linting
        run: |
          # Run ESLint and capture output
          npm run lint 2>&1 | tee lint-results.txt || true
          
          # Check if there are any errors
          if grep -q "error" lint-results.txt; then
            echo "❌ Linting errors found"
            cat lint-results.txt
            exit 1
          else
            echo "✅ No linting errors"
          fi
          
      - name: Build project
        run: npm run build
        
      - name: Run tests
        run: npm test
        
      - name: Test generation with existing rules
        if: steps.changes.outputs.has_source_changes == 'true'
        run: |
          # Only test generation if source files exist
          if [[ -f "adblock-filters-list/adblock-filters-list.txt" ]]; then
            echo "Testing generation with existing rules..."
            npm start
            
            # Verify files were created
            echo "Generated files:"
            ls -la subscription/ || echo "No subscription directory created"
            
            # Check for common issues
            if [[ -f "subscription/thai-adblock-list-ublockorigin.txt" ]]; then
              # Check that date-URL comments are filtered
              if grep -q "202[0-9] https://" subscription/thai-adblock-list-*.txt; then
                echo "❌ Date-URL comments found in generated files!"
                grep "202[0-9] https://" subscription/thai-adblock-list-*.txt
                exit 1
              fi
              
              echo "✅ Generation test passed"
            else
              echo "⚠️ No rules file found, skipping generation test"
            fi
          fi
          
      - name: Validate rule syntax
        if: steps.changes.outputs.has_source_changes == 'true'
        run: |
          # Check if adblock rules file exists and validate syntax
          if [[ -f "adblock-filters-list/adblock-filters-list.txt" ]]; then
            echo "Validating rule syntax..."
            
            # Basic syntax validation
            node -e "
              const fs = require('fs');
              const rules = fs.readFileSync('adblock-filters-list/adblock-filters-list.txt', 'utf8').split('\\n');
              let errors = [];
              
              rules.forEach((rule, index) => {
                const lineNum = index + 1;
                const trimmed = rule.trim();
                
                if (trimmed === '') return; // Skip empty lines
                if (trimmed.startsWith('!')) return; // Skip comments
                
                // Check for common syntax errors
                if (trimmed.includes('##') && trimmed.includes('#@#')) {
                  errors.push(\`Line \${lineNum}: Rule contains both hiding and exception syntax\`);
                }
                
                // Check for extremely long rules
                if (trimmed.length > 8000) {
                  errors.push(\`Line \${lineNum}: Rule is very long (\${trimmed.length} chars)\`);
                }
              });
              
              if (errors.length > 0) {
                console.log('❌ Rule validation errors:');
                errors.forEach(err => console.log(err));
                process.exit(1);
              } else {
                console.log('✅ Rule syntax validation passed');
              }
            "
          fi
          
      - name: Check for security issues
        run: |
          # Run security audit
          npm audit --audit-level=moderate
          
          # Check for potential security issues in code
          if grep -r "eval\|Function\|setTimeout.*string" src/ || true; then
            echo "⚠️ Potential security concerns found - manual review recommended"
          fi
          
      - name: Performance check
        run: |
          # Time the build process
          echo "Measuring build performance..."
          time npm run build
          
          # Time the generation process if possible
          if [[ -f "adblock-filters-list/adblock-filters-list.txt" ]]; then
            echo "Measuring generation performance..."
            time npm start
          fi
          
      - name: Comment on PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Check if we already commented
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🤖 PR Validation Results')
            );
            
            const validationPassed = '${{ job.status }}' === 'success';
            const hasSourceChanges = '${{ steps.changes.outputs.has_source_changes }}' === 'true';
            const hasConfigChanges = '${{ steps.changes.outputs.has_config_changes }}' === 'true';
            const hasWorkflowChanges = '${{ steps.changes.outputs.has_workflow_changes }}' === 'true';
            const hasGeneratedChanges = '${{ steps.changes.outputs.has_generated_changes }}' === 'true';
            
            const commentBody = `## 🤖 PR Validation Results
            
            ${validationPassed ? '✅' : '❌'} **Validation**: ${validationPassed ? 'Passed' : 'Failed'}
            
            ### 📊 Change Analysis
            
            | Category | Changed | Description |
            |----------|---------|-------------|
            | Source Code | ${hasSourceChanges ? '✅' : '➖'} | TypeScript files, utilities, configs |
            | Configuration | ${hasConfigChanges ? '⚠️' : '➖'} | Package.json, TypeScript config, ESLint |
            | Workflows | ${hasWorkflowChanges ? '⚠️' : '➖'} | GitHub Actions workflows |
            | Generated Lists | ${hasGeneratedChanges ? '📦' : '➖'} | Adblock list files |
            
            ### ✅ Completed Checks
            
            - [${validationPassed ? 'x' : ' '}] TypeScript compilation
            - [${validationPassed ? 'x' : ' '}] ESLint validation
            - [${validationPassed ? 'x' : ' '}] Test suite
            - [${validationPassed ? 'x' : ' '}] Security audit
            ${hasSourceChanges ? `- [${validationPassed ? 'x' : ' '}] Rule syntax validation` : ''}
            ${hasSourceChanges ? `- [${validationPassed ? 'x' : ' '}] Generation testing` : ''}
            
            ### 📝 Next Steps
            
            ${validationPassed ? 
              '🎉 All checks passed! This PR is ready for review.' : 
              '🔍 Please fix the validation errors before proceeding.'
            }
            
            ${hasGeneratedChanges ? 
              '⚠️ **Note**: This PR modifies generated files. Ensure these changes are intentional.' : ''
            }
            
            ---
            *Last updated: ${new Date().toISOString()}*
            *Workflow: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
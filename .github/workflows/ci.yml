name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Combined validation job for both CI and PR validation
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    permissions:
      contents: read
      pull-requests: write
      checks: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Analyze changes (PR only)
        if: github.event_name == 'pull_request'
        id: changes
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)

          echo "Changed files: $CHANGED_FILES"

          HAS_SOURCE_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(src/|adblock-filters-list/)" || echo "")
          HAS_CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(package\.json|tsconfig\.json|eslint\.config\.js)" || echo "")
          HAS_WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep -E "\.github/workflows/" || echo "")
          HAS_GENERATED_CHANGES=$(echo "$CHANGED_FILES" | grep -E "subscription/" || echo "")

          echo "has_source_changes=$([[ -n "$HAS_SOURCE_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_config_changes=$([[ -n "$HAS_CONFIG_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_workflow_changes=$([[ -n "$HAS_WORKFLOW_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_generated_changes=$([[ -n "$HAS_GENERATED_CHANGES" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Run type checking
        run: npm run type-check

      - name: Run ESLint with SARIF output
        run: |
          npx eslint src/**/*.ts \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif || true
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always() && matrix.node-version == '22.x'
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Run ESLint for console output
        run: npx eslint src/**/*.ts --format=stylish

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Security audit
        if: matrix.node-version == '22.x'
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate

          # Check for dangerous patterns
          ISSUES=0
          if grep -r "eval\|Function\|setTimeout.*string" src/ 2>/dev/null; then
            echo "⚠️ Found potentially dangerous eval/Function usage"
            ISSUES=$((ISSUES + 1))
          fi

          if grep -r "api[_-]?key\|password\|secret\|token" src/ --include="*.ts" --include="*.js" 2>/dev/null; then
            echo "⚠️ Found potential hardcoded secrets (review manually)"
            ISSUES=$((ISSUES + 1))
          fi

          if [[ $ISSUES -eq 0 ]]; then
            echo "✅ No security issues detected"
          else
            echo "⚠️ Found $ISSUES potential issues - manual review recommended"
          fi

      - name: Test generation
        if: matrix.node-version == '22.x'
        run: |
          echo "🔧 Creating test rules file..."
          mkdir -p adblock-filters-list
          cat > adblock-filters-list/adblock-filters-list.txt << 'EOF'
          ! Test adblock rules for CI
          ! May 28, 2025 https://example.com
          ||example.com^
          example.com##.ad
          @@||example.com/allowed^
          ! Important: Test comment
          ||test.com/path$script,third-party
          test.com##div[id="banner"]
          ! June 15, 2025 https://test.com
          ||domain.test^$badfilter
          ! https://just-a-url.com
          !
          EOF

          echo "🚀 Generating adblock lists..."
          npm run generate

          echo "✅ Verifying generated files..."
          test -f subscription/thai-adblock-list-ublockorigin.txt || (echo "uBlock Origin file not created" && exit 1)
          test -f subscription/thai-adblock-list-adblockplus.txt || (echo "Adblock Plus file not created" && exit 1)
          test -f subscription/thai-adblock-list-adguard.txt || (echo "AdGuard file not created" && exit 1)
          test -f subscription/domains.txt || (echo "Domains file not created" && exit 1)

          # Verify date-URL comments are removed
          if grep -q "May 28, 2025 https://" subscription/thai-adblock-list-*.txt; then
            echo "❌ Date-URL comments were not filtered out!"
            exit 1
          fi

          echo "✅ Generation test passed!"

      - name: Validate rule syntax (if source changed)
        if: steps.changes.outputs.has_source_changes == 'true' && matrix.node-version == '22.x'
        run: |
          if [[ -f "adblock-filters-list/adblock-filters-list.txt" ]]; then
            echo "Validating rule syntax..."
            node -e "
              const fs = require('fs');
              const rules = fs.readFileSync('adblock-filters-list/adblock-filters-list.txt', 'utf8').split('\\n');
              let errors = [];
              
              rules.forEach((rule, index) => {
                const lineNum = index + 1;
                const trimmed = rule.trim();
                
                if (trimmed === '' || trimmed.startsWith('!')) return;
                
                if (trimmed.includes('##') && trimmed.includes('#@#')) {
                  errors.push(\`Line \${lineNum}: Rule contains both hiding and exception syntax\`);
                }
                
                if (trimmed.length > 8000) {
                  errors.push(\`Line \${lineNum}: Rule is very long (\${trimmed.length} chars)\`);
                }
              });
              
              if (errors.length > 0) {
                console.log('❌ Rule validation errors:');
                errors.forEach(err => console.log(err));
                process.exit(1);
              } else {
                console.log('✅ Rule syntax validation passed');
              }
            "
          fi

      - name: Upload build artifacts
        if: matrix.node-version == '22.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            subscription/
          retention-days: 7

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && matrix.node-version == '22.x' && always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🤖 CI Validation Results')
            );

            const validationPassed = '${{ job.status }}' === 'success';
            const hasSourceChanges = '${{ steps.changes.outputs.has_source_changes }}' === 'true';
            const hasConfigChanges = '${{ steps.changes.outputs.has_config_changes }}' === 'true';
            const hasWorkflowChanges = '${{ steps.changes.outputs.has_workflow_changes }}' === 'true';
            const hasGeneratedChanges = '${{ steps.changes.outputs.has_generated_changes }}' === 'true';

            const commentBody = \`## 🤖 CI Validation Results

            \${validationPassed ? '✅' : '❌'} **Overall Status**: \${validationPassed ? 'Passed' : 'Failed'}

            ### 📊 Change Analysis

            | Category | Changed | Impact |
            |----------|---------|--------|
            | Source Code | \${hasSourceChanges ? '✅' : '➖'} | \${hasSourceChanges ? 'Code changes detected' : 'No code changes'} |
            | Configuration | \${hasConfigChanges ? '⚠️' : '➖'} | \${hasConfigChanges ? 'Config changes - review carefully' : 'No config changes'} |
            | Workflows | \${hasWorkflowChanges ? '⚠️' : '➖'} | \${hasWorkflowChanges ? 'Workflow changes detected' : 'No workflow changes'} |
            | Generated Lists | \${hasGeneratedChanges ? '📦' : '➖'} | \${hasGeneratedChanges ? 'List files modified' : 'No list changes'} |

            ### ✅ Completed Checks

            - [\${validationPassed ? 'x' : ' '}] Multi-version Node.js testing (18.x, 20.x, 22.x)
            - [\${validationPassed ? 'x' : ' '}] TypeScript compilation
            - [\${validationPassed ? 'x' : ' '}] ESLint validation + SARIF upload
            - [\${validationPassed ? 'x' : ' '}] Test suite execution
            - [\${validationPassed ? 'x' : ' '}] Security audit
            - [\${validationPassed ? 'x' : ' '}] Build verification
            - [\${validationPassed ? 'x' : ' '}] Generation testing
            \${hasSourceChanges ? \`- [\${validationPassed ? 'x' : ' '}] Rule syntax validation\` : ''}

            ### 📝 Summary

            \${validationPassed ? 
              '🎉 All checks passed! This PR is ready for review and merge.' : 
              '🔍 Some checks failed. Please review the workflow logs and fix the issues.'
            }

            \${hasGeneratedChanges ? 
              '⚠️ **Note**: This PR modifies generated adblock list files. Please ensure these changes are intentional and correct.' : ''
            }

            ---
            *Validated on: \${new Date().toISOString()}*  
            *Workflow: [CI Pipeline](\${context.payload.repository.html_url}/actions/runs/\${context.runId})*\`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

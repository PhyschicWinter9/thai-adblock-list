name: Maintenance & Release

on:
  schedule:
    # Daily list updates at 2 AM UTC
    - cron: "0 2 * * *"
    # Weekly dependency updates on Sundays at 3 AM UTC
    - cron: "0 3 * * 0"
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "update-lists"
        type: choice
        options:
          - update-lists
          - update-dependencies
          - create-release
      update_type:
        description: "Dependency update type (for update-dependencies)"
        required: false
        default: "minor"
        type: choice
        options:
          - patch
          - minor
          - major
      force_update:
        description: "Force update even if no changes detected"
        required: false
        default: false
        type: boolean
      version:
        description: "Release version (for create-release, e.g., v1.3.0)"
        required: false
        default: "v1.3.0"

jobs:
  # Determine what action to take based on trigger
  determine-action:
    name: Determine Action
    runs-on: ubuntu-latest

    outputs:
      action: ${{ steps.determine.outputs.action }}
      should_update_lists: ${{ steps.determine.outputs.should_update_lists }}
      should_update_deps: ${{ steps.determine.outputs.should_update_deps }}
      should_release: ${{ steps.determine.outputs.should_release }}

    steps:
      - name: Determine action
        id: determine
        run: |
          ACTION=""
          UPDATE_LISTS="false"
          UPDATE_DEPS="false"
          RELEASE="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ACTION="${{ github.event.inputs.action }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" == "0 2 * * *" ]]; then
              ACTION="update-lists"
            elif [[ "${{ github.event.schedule }}" == "0 3 * * 0" ]]; then
              ACTION="update-dependencies"
            fi
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            ACTION="create-release"
          fi

          case $ACTION in
            "update-lists")
              UPDATE_LISTS="true"
              ;;
            "update-dependencies")
              UPDATE_DEPS="true"
              ;;
            "create-release")
              RELEASE="true"
              ;;
          esac

          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "should_update_lists=$UPDATE_LISTS" >> $GITHUB_OUTPUT
          echo "should_update_deps=$UPDATE_DEPS" >> $GITHUB_OUTPUT
          echo "should_release=$RELEASE" >> $GITHUB_OUTPUT

          echo "🎯 Action determined: $ACTION"

  # Update adblock lists
  update-lists:
    name: Update Adblock Lists
    runs-on: ubuntu-latest
    needs: [determine-action]
    if: needs.determine-action.outputs.should_update_lists == 'true'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for source changes
        id: check
        run: |
          # Check if source file was modified in the last 25 hours
          if [[ -f "adblock-filters-list/adblock-filters-list.txt" ]]; then
            LAST_COMMIT=$(git log -1 --format="%ct" -- adblock-filters-list/adblock-filters-list.txt)
            CURRENT_TIME=$(date +%s)
            TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT))
            HOURS_DIFF=$((TIME_DIFF / 3600))
            
            echo "Last modification: $HOURS_DIFF hours ago"
            
            if [[ $HOURS_DIFF -lt 25 ]] || [[ "${{ github.event.inputs.force_update }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "should_update=true" >> $GITHUB_OUTPUT
              echo "📝 Update needed"
            else
              echo "should_update=false" >> $GITHUB_OUTPUT
              echo "📅 No recent changes"
            fi
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
            echo "❌ Source file not found"
          fi

      - name: Setup Node.js
        if: steps.check.outputs.should_update == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Install dependencies and generate lists
        if: steps.check.outputs.should_update == 'true'
        run: |
          npm ci
          npm run build
          npm run generate

      - name: Check for changes
        if: steps.check.outputs.should_update == 'true'
        id: changes
        run: |
          if git diff --quiet subscription/; then
            echo "files_changed=false" >> $GITHUB_OUTPUT
            echo "📋 No changes in generated files"
          else
            echo "files_changed=true" >> $GITHUB_OUTPUT
            echo "📝 Changes detected in generated files"
            
            # Count rules and generate stats
            UBLOCK_RULES=$(grep -v '^!' subscription/thai-adblock-list-ublockorigin.txt | grep -v '^$' | wc -l)
            ABP_RULES=$(grep -v '^!' subscription/thai-adblock-list-adblockplus.txt | grep -v '^$' | wc -l)
            ADGUARD_RULES=$(grep -v '^!' subscription/thai-adblock-list-adguard.txt | grep -v '^$' | wc -l)
            DOMAINS_COUNT=$(grep -v '^!' subscription/domains.txt | grep -v '^$' | wc -l)
            
            echo "UBLOCK_RULES=$UBLOCK_RULES" >> $GITHUB_OUTPUT
            echo "ABP_RULES=$ABP_RULES" >> $GITHUB_OUTPUT
            echo "ADGUARD_RULES=$ADGUARD_RULES" >> $GITHUB_OUTPUT
            echo "DOMAINS_COUNT=$DOMAINS_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.files_changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            📦 Automated list update - $(date +%Y-%m-%d)

            📊 Statistics:
            - uBlock Origin: ${{ steps.changes.outputs.UBLOCK_RULES }} rules
            - Adblock Plus: ${{ steps.changes.outputs.ABP_RULES }} rules  
            - AdGuard: ${{ steps.changes.outputs.ADGUARD_RULES }} rules
            - Domains: ${{ steps.changes.outputs.DOMAINS_COUNT }} entries

            🤖 Generated automatically
          branch: automated-update-${{ github.run_number }}
          delete-branch: true
          title: "📦 Automated List Update - ${{ github.run_number }}"
          body: |
            ## 🤖 Automated Adblock List Update

            ### 📊 Statistics

            | Format | Rules | File Size |
            |--------|-------|-----------|
            | uBlock Origin | ${{ steps.changes.outputs.UBLOCK_RULES }} | $(du -h subscription/thai-adblock-list-ublockorigin.txt | cut -f1) |
            | Adblock Plus | ${{ steps.changes.outputs.ABP_RULES }} | $(du -h subscription/thai-adblock-list-adblockplus.txt | cut -f1) |
            | AdGuard | ${{ steps.changes.outputs.ADGUARD_RULES }} | $(du -h subscription/thai-adblock-list-adguard.txt | cut -f1) |
            | Domains | ${{ steps.changes.outputs.DOMAINS_COUNT }} | $(du -h subscription/domains.txt | cut -f1) |

            ### ✅ Quality Checks

            - [x] Generation successful
            - [x] Comment filtering applied
            - [x] All formats validated

            ---
            *Auto-generated on $(date -u +"%Y-%m-%d %H:%M:%S UTC")*
          labels: |
            automated
            adblock-lists
          reviewers: PhyschicWinter9

  # Update dependencies
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: [determine-action]
    if: needs.determine-action.outputs.should_update_deps == 'true'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Check and update dependencies
        id: update
        run: |
          npm ci

          # Check for outdated packages
          npm outdated --json > outdated.json || true

          if [[ -s outdated.json ]]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
            echo "Update type: $UPDATE_TYPE"
            
            cp package.json package.json.backup
            
            case $UPDATE_TYPE in
              "patch")
                npm update --save
                npm update --save-dev
                ;;
              "minor")
                npx npm-check-updates -u --target minor
                npm install
                ;;
              "major")
                npx npm-check-updates -u
                npm install
                ;;
            esac
            
            if ! diff -q package.json package.json.backup > /dev/null; then
              echo "package_changed=true" >> $GITHUB_OUTPUT
              
              # Test with new dependencies
              npm run type-check
              npm run lint
              npm run build
              npm test
              
              # Security audit
              npm audit --audit-level=moderate || true
              
              # Count updates
              PACKAGE_COUNT=$(cat outdated.json | jq 'length')
              echo "PACKAGE_COUNT=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
              echo "UPDATE_TYPE=$UPDATE_TYPE" >> $GITHUB_OUTPUT
            else
              echo "package_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Dependency Update PR
        if: steps.update.outputs.package_changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            📦 Dependency update (${{ steps.update.outputs.UPDATE_TYPE }}) - $(date +%Y-%m-%d)

            🔄 Updated ${{ steps.update.outputs.PACKAGE_COUNT }} packages
            🧪 All tests passing
            🔒 Security audit completed
          branch: dependency-update-${{ github.run_number }}
          delete-branch: true
          title: "📦 Dependency Update (${{ steps.update.outputs.UPDATE_TYPE }})"
          body: |
            ## 🤖 Automated Dependency Update

            - **Update Type**: ${{ steps.update.outputs.UPDATE_TYPE }}
            - **Packages Updated**: ${{ steps.update.outputs.PACKAGE_COUNT }}
            - **All Tests**: ✅ Passing
            - **Security Audit**: ✅ Completed

            <details>
            <summary>📦 Updated Packages</summary>

            ```json
            $(cat outdated.json 2>/dev/null || echo "{}")
            ```
            </details>
          labels: |
            dependencies
            automated
            ${{ steps.update.outputs.UPDATE_TYPE }}
          reviewers: PhyschicWinter9

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-action]
    if: needs.determine-action.outputs.should_release == 'true'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Build and generate
        run: |
          npm ci
          npm run build
          npm test
          npm run generate

      - name: Create release assets
        run: |
          mkdir -p release

          # Copy generated files
          cp subscription/*.txt release/

          # Create archives
          cd subscription
          zip -r ../release/thai-adblock-list-ublockorigin.zip thai-adblock-list-ublockorigin.txt
          zip -r ../release/thai-adblock-list-adblockplus.zip thai-adblock-list-adblockplus.txt
          zip -r ../release/thai-adblock-list-adguard.zip thai-adblock-list-adguard.txt
          zip -r ../release/domains.zip domains.txt
          zip -r ../release/thai-adblock-lists-all.zip *.txt
          cd ..

          # Source archive
          git archive --format=zip --prefix=thai-adblock-list-generator/ HEAD > release/source-code.zip

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          fi

          # Count rules
          UBLOCK_RULES=$(grep -v '^!' subscription/thai-adblock-list-ublockorigin.txt | grep -v '^$' | wc -l)
          ABP_RULES=$(grep -v '^!' subscription/thai-adblock-list-adblockplus.txt | grep -v '^$' | wc -l)
          ADGUARD_RULES=$(grep -v '^!' subscription/thai-adblock-list-adguard.txt | grep -v '^$' | wc -l)
          DOMAINS_COUNT=$(grep -v '^!' subscription/domains.txt | grep -v '^$' | wc -l)

          cat > release_notes.md << EOF
          # Thai Adblock List ${VERSION}

          ## 📊 Statistics

          | Format | Active Rules | File Size |
          |--------|-------------|-----------|
          | uBlock Origin | ${UBLOCK_RULES} | $(du -h subscription/thai-adblock-list-ublockorigin.txt | cut -f1) |
          | Adblock Plus | ${ABP_RULES} | $(du -h subscription/thai-adblock-list-adblockplus.txt | cut -f1) |
          | AdGuard | ${ADGUARD_RULES} | $(du -h subscription/thai-adblock-list-adguard.txt | cut -f1) |
          | Domains List | ${DOMAINS_COUNT} | $(du -h subscription/domains.txt | cut -f1) |

          ## 🔗 Subscription URLs

          \`\`\`
          https://github.com/${{ github.repository }}/releases/download/${VERSION}/thai-adblock-list-ublockorigin.txt
          https://github.com/${{ github.repository }}/releases/download/${VERSION}/thai-adblock-list-adblockplus.txt
          https://github.com/${{ github.repository }}/releases/download/${VERSION}/thai-adblock-list-adguard.txt
          \`\`\`

          ## ✨ Features

          - 🧹 Smart comment filtering
          - 🎯 Format-specific optimization
          - 🌐 Thai website focus
          - 📱 Multi-platform support

          Generated on $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_notes.outputs.VERSION }}
          name: Thai Adblock List ${{ steps.release_notes.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            release/*.txt
            release/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
